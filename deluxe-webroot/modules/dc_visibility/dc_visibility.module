<?php 

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */

function dc_visibility_ctools_plugin_directory($module, $plugin) {
  if (!empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds community specific visibility options to add block form.
 *
 * @see block_add_block_form()
 */
function dc_visibility_form_block_add_block_form_alter(&$form, &$form_state) {
  dc_visibility_form_block_admin_configure_alter($form, $form_state);
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds community specific visibility options to block configuration form.
 *
 * @see block_admin_configure()
 */

function dc_visibility_form_block_admin_configure_alter(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'dc_visibility') . '/dc-visibility.js');
    /* get community list*/
  $default_type_options = db_query("SELECT type FROM {block_cummunity_type} WHERE module = :module AND delta = :delta", array(
    ':module' => $form['module']['#value'],
    ':delta' => $form['delta']['#value'],
  	))->fetchCol();

    $communities_options = array();
    $communities = node_load_multiple(array(), array('type' => 'community'));

    foreach ($communities as $key => $community) {
      $community_name = $community->field_community_code['und'][0]['value'];
      $communities_options[strtolower($community_name)] = $community_name;
    }

    $form['visibility']['commnunity_type'] = array(
      '#type' => 'fieldset',
      '#title' => t('Commnunity  types'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'visibility',
      '#weight' => 6,
    );
    $form['visibility']['commnunity_type']['name'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Show block for specific commnunity'),
      '#default_value' => $default_type_options,
      '#options' => $communities_options,
      '#description' => t('Allow individual commnunity base customize the visibility of this block settings'),
    );
    $form['#submit'][] = 'dc_visibility_form_block_admin_configure_submit';
}


/**
 * Form submission handler for dc_visibility_form_block_admin_configure_alter().
 *
 * @see dc_visibility_form_block_admin_configure_alter()
 */
function dc_visibility_form_block_admin_configure_submit($form, &$form_state) {

  db_delete('block_cummunity_type')
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();
  $query = db_insert('block_cummunity_type')->fields(array('type', 'module', 'delta'));
  foreach (array_filter($form_state['values']['name']) as $name) {
    $query->values(array(
      'type' => $name,
      'module' => $form_state['values']['module'],
      'delta' => $form_state['values']['delta'],
    ));
  }
  $query->execute();
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds community specific submit handler to delete custom block form.
 *
 * @see block_custom_block_delete()
 */
function dc_visibility_form_block_custom_block_delete_alter(&$form, &$form_state) {
  $form['#submit'][] = 'dc_visibility_form_block_custom_block_delete_submit';
}

/**
 * Form submission handler for dc_visibility_form_block_custom_block_delete_alter().
 *
 * @see dc_visibility_form_block_custom_block_delete_alter()
 */
function dc_visibility_form_block_custom_block_delete_submit($form, &$form_state) {
  db_delete('block_cummunity_type')
    ->condition('module', 'block')
    ->condition('delta', $form_state['values']['bid'])
    ->execute();
}

/**
 * Form submission handler for dc_visibility_form_block_custom_block_delete_alter().
 *
 * @see dc_visibility_form_block_custom_block_delete_alter()
 */
function dc_visibility_block_custom_block_delete_submit($form, &$form_state) {
  db_delete('block_cummunity_type')
    ->condition('module', 'block')
    ->condition('delta', $form_state['values']['bid'])
    ->execute();
}

/**
 * Implements hook_modules_uninstalled().
 *
 * Cleanup {block_cummunity_type} table from modules' blocks.
 */
function dc_visibility_modules_uninstalled($modules) {
  db_delete('block_cummunity_type')
    ->condition('module', $modules, 'IN')
    ->execute();
}

/**
 * Implements hook_block_list_alter().
 *
 * Check the content type specific visibilty settings. Remove the block if the
 * visibility conditions are not met.
 */
function dc_visibility_block_list_alter(&$blocks) {
  global $theme_key;
  $tanent_info = &drupal_static('tanent_info');
 
  // Build an array of community types for each block.
  $block_community_types = array();
  $result = db_query('SELECT module, delta, type FROM {block_cummunity_type}');
  foreach ($result as $record) {
    $block_community_types[$record->module][$record->delta][$record->type] = TRUE;
  }
 
  foreach ($blocks as $key => $block) {
    if (!isset($block->theme) || !isset($block->status) || $block->theme != $theme_key || $block->status != 1) {
      // This block was added by a contrib module, leave it in the list.
      continue;
    }
    // If a block has no community types associated, it is displayed for every type.
    // For blocks with community types associated, if the community type does not match
    // the settings from this block, remove it from the block list.
    if (isset($block_community_types[$block->module][$block->delta])) {
      if (array_key_exists(strtolower($tanent_info['tenant_name']), $block_community_types[$block->module][$block->delta])) {
          continue;
      }
      else {
        // This is not a community selected, remove the block.
        unset($blocks[$key]);
        continue;
      }
    }
  }
}
